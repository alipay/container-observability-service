# 工作流名称
name: Build and Push Docker Image and Helm package

on:
  push:
    tags: "*"

env:
  DOCKERHUB_REGISTRY: registry-1.docker.io
  ACR_REGISTRY: registry.cn-hangzhou.aliyuncs.com
  REGISTRY_NAMESPACE: lunettes
  LUNETTES_IMAGE_NAME: lunettes
  GRAFANA_IMAGE_NAME: grafana
  # Plugins to be installed.
  GRAFANA_PLUGINS: "yesoreyeram-infinity-datasource,marcusolsson-json-datasource,marcusolsson-dynamictext-panel,volkovlabs-form-panel:3.1.0"

jobs:
  main:
    # Run on Ubuntu.
    runs-on: ubuntu-latest
    steps:
      # git checkout code
      - name: Checkout
        uses: actions/checkout@v2
      # Set up QEMU, as it is a dependency for docker buildx.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      # Set up Docker buildx to facilitate the building of multi-platform images.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # 登录 acr https://cr.console.aliyun.com/cn-hangzhou/instance/repositories
      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_TOKEN }}
      # 登录 docker hub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          # GitHub Repo => Settings => Secrets add Docker Hub login key information
          # DOCKERHUB_USERNAME is the Docker Hub username.
          # DOCKERHUB_TOKEN: docker hub => Account Setting => Security => New Access Token.
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      # Use the git command to retrieve the current tag information and store it in the environment variable APP_VERSION.
      - name: Generate App Version
        run: echo APP_VERSION=`git describe --tags --always` >> $GITHUB_ENV
      - name: Build and push lunettes
        id: docker_build_lunettes
        uses: docker/build-push-action@v2
        with:
          push: true
          file: build/docker/Dockerfile.lunettes
          # Generate multi-platform images, see https://github.com/docker-library/bashbrew/blob/v0.1.1/architecture/oci-platform.go
          platforms: |
            linux/amd64
            linux/arm64
          # docker build arg
          build-args: |
            GOARCH=$(go env GOARCH)
          # Generate two Docker tags: ${APP_VERSION} 和 latest
          tags: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.LUNETTES_IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.LUNETTES_IMAGE_NAME }}:${{ env.APP_VERSION }}
            ${{ env.ACR_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.LUNETTES_IMAGE_NAME }}:latest
            ${{ env.ACR_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.LUNETTES_IMAGE_NAME }}:${{ env.APP_VERSION }}
      - name: Build and push grafana
        id: docker_build_grafana
        uses: docker/build-push-action@v2
        with:
          push: true
          file: build/docker/Dockerfile.grafana
          # Generate multi-platform images, see https://github.com/docker-library/bashbrew/blob/v0.1.1/architecture/oci-platform.go
          platforms: |
            linux/amd64
            linux/arm64
          # docker build arg
          build-args: |
            PLUGINS=${{ env.GRAFANA_PLUGINS }}
          # Generate two Docker tags: ${APP_VERSION} 和 latest
          tags: |
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.GRAFANA_IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.GRAFANA_IMAGE_NAME }}:${{ env.APP_VERSION }}
            ${{ env.ACR_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.GRAFANA_IMAGE_NAME }}:latest
            ${{ env.ACR_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}/${{ env.GRAFANA_IMAGE_NAME }}:${{ env.APP_VERSION }}

      - uses: azure/setup-helm@v3
        id: install

      - name: helm package chart
        run: |
          sed -i 's/    tag: version/    tag: ${{ env.APP_VERSION }}/g' deploy/helm/lunettes/values.yaml
          helm package deploy/helm/lunettes --app-version=${{ env.APP_VERSION }} --version=${{ env.APP_VERSION }} -d _out

      - name: helm push chart
        # OCI artifacts on Docker Hub 
        # see: https://docs.docker.com/docker-hub/oci-artifacts/
        run: |
          helm push _out/lunettes-chart-${{ env.APP_VERSION }}.tgz oci://${{ env.DOCKERHUB_REGISTRY }}/${{ env.REGISTRY_NAMESPACE }}