apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        supplementalGroups:
          - 0
      containers:
      - name: grafana
        image: {{ .Values.global.registry }}/{{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag}}
        imagePullPolicy: {{ .Values.global.imagePullPolicy }}
        lifecycle:
          postStart:
            exec: 
              command:
                - bash
                - -c
                - |
                  wait_time=1
                  while true;
                  do
                    status=`curl -s -w %{http_code} -o /dev/null \
                    -X POST -H "Content-Type: application/json" \
                    -d '{"name":"{{ .Values.grafana.anonymousUser }}","email":"","login":"{{ .Values.grafana.anonymousUser }}","password":"{{ .Values.grafana.anonymousPass }}"}' \
                    http://{{ .Values.grafana.adminUser }}:{{ .Values.grafana.adminPass }}@localhost:3000/api/admin/users`
                    if [ -n "${status}" ] && [ "${status}X" == "200X" ];
                    then
                      echo "user {{ .Values.grafana.anonymousUser }} has created"
                      break
                    else
                      echo "user {{ .Values.grafana.anonymousUser }} created failed, status is ${status} retrying after ${wait_time}s..."
                      sleep ${wait_time}
                      wait_time=$((wait_time+wait_time))
                    fi
                  done
        ports:
          - containerPort: 3000
            name: http-grafana
            protocol: TCP
        resources:
{{ toYaml .Values.grafana.resources | indent 10 }}
        volumeMounts:
        - name: grafana-datasoruce
          mountPath: /etc/grafana/provisioning/datasources/
        - name: grafana-dashboards-provision
          mountPath: /etc/grafana/provisioning/dashboards/dashboards.yaml
          subPath: dashboards.yaml
        - name: grafana-dashboards-general
          mountPath: /home/data/grafana/dashboards
        - name: grafana-config
          mountPath: /etc/grafana/grafana.ini
          subPath: grafana.ini  
      volumes:
      - name: grafana-datasoruce
        configMap:
          name: grafana-datasource
      - name: grafana-dashboards-provision
        configMap:
          name: grafana-dashboards-provision
      - name: grafana-dashboards-general
        configMap:
          name: grafana-dashboards-general
      - name: grafana-config
        configMap:
          name: grafana-config                                       
          items:
          - key: grafana.ini
            path: grafana.ini